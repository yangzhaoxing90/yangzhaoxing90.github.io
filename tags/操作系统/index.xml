<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>操作系统 on Bluee&#39;s Blog</title>
        <link>https://yangzhaoxing90.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 操作系统 on Bluee&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 04 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yangzhaoxing90.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>操作系统导论</title>
        <link>https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA/</link>
        <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA/</guid>
        <description>&lt;img src="https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA/cover.png" alt="Featured image of post 操作系统导论" /&gt;&lt;h2 id=&#34;第-1-章-关于本书的对话&#34;&gt;第 1 章 关于本书的对话
&lt;/h2&gt;&lt;p&gt;三个关键概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟化（virtualization）、并发（concurrency）、持久性（persistence）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统是如何工作的&lt;/li&gt;
&lt;li&gt;操作系统决定解下来哪个程序使用 CPU&lt;/li&gt;
&lt;li&gt;如何在虚拟内存系统中处理内存使用过载&lt;/li&gt;
&lt;li&gt;虚拟机监控器如何工作&lt;/li&gt;
&lt;li&gt;如何管理磁盘上的数据&lt;/li&gt;
&lt;li&gt;如果构建在部分节点失败时仍能正常工作的分布式系统&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>现代操作系统</title>
        <link>https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;img src="https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/cover.png" alt="Featured image of post 现代操作系统" /&gt;&lt;h2 id=&#34;第-1-章-引论&#34;&gt;第 1 章 引论
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/op.png&#34;
	width=&#34;988&#34;
	height=&#34;690&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/op_hu1603221673318287124.png 480w, https://yangzhaoxing90.github.io/p/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/op_hu17484228795666731706.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;操作系统&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>操作系统概念-Java实现</title>
        <link>https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;img src="https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/cover.png" alt="Featured image of post 操作系统概念-Java实现" /&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;h3 id=&#34;第1章-导论&#34;&gt;第1章 导论
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;操作系统&lt;/strong&gt;是管理计算机硬件的程序,它还为应用程序提供基础，充当计算机硬件和用户之间的中介&lt;/p&gt;
&lt;p&gt;本章目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概括介绍操作系统的主要组件&lt;/li&gt;
&lt;li&gt;概括介绍计算机系统的基本组织体系结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-操作系统做什么&#34;&gt;1.1 操作系统做什么
&lt;/h3&gt;&lt;p&gt;计算机系统可以粗分为 4 个组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件 （如CPU、内存、IO设备），为系统提供基本的计算资源&lt;/li&gt;
&lt;li&gt;操作系统  控制和协调用户的应用程序对硬件的使用&lt;/li&gt;
&lt;li&gt;系统程序、应用程序 （如 word、浏览器），规定了按照何种方式使用资源解决用户的问题&lt;/li&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-计算机系统组织&#34;&gt;1.2 计算机系统组织
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;计算机系统操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/computer.png&#34;
	width=&#34;1818&#34;
	height=&#34;754&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/computer_hu6849697394904808510.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/computer_hu15780207442248125220.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;计算机系统&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;电脑启动 -&amp;gt; 初始化程序 (位于固件中) -&amp;gt; 引导程序定位操作系统内核，并把它装入内存 -&amp;gt; 操作系统执行第一个进程，如 init -&amp;gt; 等待事件发生&lt;/p&gt;
&lt;p&gt;事件的发送：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件中断 （随时通过系统总线向 CPU 发出信号，以触发中断）&lt;/li&gt;
&lt;li&gt;软件中断 （通过执行系统调用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/break.png&#34;
	width=&#34;1522&#34;
	height=&#34;508&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/break_hu534678196616144984.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/break_hu7880368997590487367.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;中断&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;299&#34;
		data-flex-basis=&#34;719px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;CPU 执行 IO 中断，然后又恢复原来的进程执行&lt;/p&gt;
&lt;p&gt;不同的计算机有不同的中断机制，共同的点是，中断必须将控制权交给合适的&lt;strong&gt;中断服务历程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存储结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/storage.png&#34;
	width=&#34;1722&#34;
	height=&#34;1212&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/storage_hu13254898650629388115.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/storage_hu2680890449139550049.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;存储设备的层次&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通用计算机系统由一个CPU和多个&lt;strong&gt;设备控制器组成&lt;/strong&gt;，它们通过共同的总线连接起来。每个设备控制器负责特定类型的设备&lt;/p&gt;
&lt;p&gt;通常操作系统为每个设备控制器提供一个&lt;strong&gt;设备驱动程序&lt;/strong&gt;，设备驱动程序理解设备控制器，提供设备和操作系统之间统一的接口&lt;/p&gt;
&lt;p&gt;为了开始 IO 操作，设备驱动程序在设备控制器中装载适当的寄存器，设备控制器检查这些寄存器的内容，以确定执行什么操作&lt;/p&gt;
&lt;p&gt;这种 IO 中断驱动适合移动少量数据，但对于大量数据的移动，会带来超载问题，&lt;strong&gt;DMA （直接内存访问）&lt;/strong&gt; 就是为了解决这个问题设计的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/work.png&#34;
	width=&#34;1278&#34;
	height=&#34;1108&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/work_hu3538462290466228500.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/work_hu115140314043453887.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;计算机内部工作&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;13-计算机系统体系结构&#34;&gt;1.3 计算机系统体系结构
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单处理器系统&lt;/li&gt;
&lt;li&gt;多处理器系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-操作系统结构&#34;&gt;1.4 操作系统结构
&lt;/h3&gt;&lt;p&gt;多道程序能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分时系统 （CPU 来回切换执行任务）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分时系统在主存储器中保存几个作业，作业最开始存在于磁盘的作业池中&lt;/p&gt;
&lt;p&gt;操作系统通过作业调度从作业池中选择作业加载入内存，这一决策过程叫做 CPU 调度&lt;/p&gt;
&lt;p&gt;分时操作系统中，操作系统必须保证合理的响应时间，这有时通过交换来得到，其中进程被换入内存或由内存换出到磁盘&lt;/p&gt;
&lt;p&gt;虚拟内存（主要优点是程序可以比物理内存大）&lt;/p&gt;
&lt;p&gt;分时系统也提供文件系统&lt;/p&gt;
&lt;h3 id=&#34;15-操作系统操作&#34;&gt;1.5 操作系统操作
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;双重模式操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户模式&lt;/li&gt;
&lt;li&gt;内核模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以区分操作系统所执行的任务和用户所执行的任务&lt;/p&gt;
&lt;p&gt;双重模式操作为人们提供了保护操作系统和用户程序不受错误用户程序影响的手段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/double.png&#34;
	width=&#34;1638&#34;
	height=&#34;638&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/double_hu6574997663853925450.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/double_hu16962525449283596043.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;双重模式操作&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;616px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;实现方式为：将能引起损害的机器指令作为&lt;strong&gt;特权指令&lt;/strong&gt;， 硬件允许特权指令仅在内核模式下执行&lt;/p&gt;
&lt;p&gt;定时器：&lt;/p&gt;
&lt;p&gt;必须确保操作系统能维持对CPU的控制，也必须防止用户程序陷入死循环或不调用系统服务，并且不将控制权返回到操作系统&lt;/p&gt;
&lt;p&gt;可将定时器设置为在给定时间后中断计算机，时间可以是固定的，也可以是可变的&lt;/p&gt;
&lt;h3 id=&#34;16-进程管理&#34;&gt;1.6 进程管理
&lt;/h3&gt;&lt;p&gt;处于执行中的程序被称为进程&lt;/p&gt;
&lt;p&gt;进程需要一定的资源，CPU时间、内存、文件、I/O设备来完成其任务&lt;/p&gt;
&lt;p&gt;操作系统负责管理进程的如下活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建和删除用户进程和系统进程&lt;/li&gt;
&lt;li&gt;挂起和重启进程&lt;/li&gt;
&lt;li&gt;提供进程同步机制&lt;/li&gt;
&lt;li&gt;提供进程通信机制&lt;/li&gt;
&lt;li&gt;提供死锁处理机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-内存管理&#34;&gt;1.7 内存管理
&lt;/h3&gt;&lt;p&gt;内存是一个大的字或字节的数组，每个字或字节都有自己的地址&lt;/p&gt;
&lt;p&gt;内存是可以被 CPU 和 I/O 设备所共同快速访问的数据仓库&lt;/p&gt;
&lt;p&gt;操作系统负责下列有关内存的活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录内存的哪部分正在被使用以及被谁使用&lt;/li&gt;
&lt;li&gt;当有内存空间时，决定哪些进程可以装入内存&lt;/li&gt;
&lt;li&gt;根据需要释放分配和释放内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;18-存储管理&#34;&gt;1.8 存储管理
&lt;/h3&gt;&lt;p&gt;操作系统对存储设备的物理属性进行了抽象，定义了逻辑存储单元，就是文件&lt;/p&gt;
&lt;p&gt;文件是由其创建者定义的一组相关信息的集合 （程序和数据）&lt;/p&gt;
&lt;p&gt;操作系统负责下列有关文件管理的活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建和删除文件&lt;/li&gt;
&lt;li&gt;创建和删除目录来组织文件&lt;/li&gt;
&lt;li&gt;提供操作文件和目录的原语&lt;/li&gt;
&lt;li&gt;将文件映射到二级存储上&lt;/li&gt;
&lt;li&gt;在稳定（非易失的）存储介质上备份文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现代大多数操作系统都采用硬盘作为主要在线存储介质来存储程序和数据&lt;/p&gt;
&lt;p&gt;操作系统负责下列有关硬盘管理的活动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空闲空间管理&lt;/li&gt;
&lt;li&gt;存储空间分配&lt;/li&gt;
&lt;li&gt;硬盘调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-保护和安全&#34;&gt;1.9 保护和安全
&lt;/h3&gt;&lt;p&gt;保护是一种控制进程或用户对计算机系统资源访问的机制&lt;/p&gt;
&lt;p&gt;绝大多数操作系统维护一种用户名和相关用户标识（UID）的链表，这些数值对用户来说是唯一的&lt;/p&gt;
&lt;h3 id=&#34;110-分布式系统&#34;&gt;1.10 分布式系统
&lt;/h3&gt;&lt;p&gt;分布式系统是一组物理上分开的、可能各个异构的计算机系统通过网络连接在一起，为用户提供系统所维护的各种资源的计算机的集合&lt;/p&gt;
&lt;h3 id=&#34;111-专用系统&#34;&gt;1.11 专用系统
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实时嵌入系统 （运行实时操作系统，有明确切固定的时间约束）&lt;/li&gt;
&lt;li&gt;多媒体系统 （多媒体数据必须根据确定的时间限制来传输流）&lt;/li&gt;
&lt;li&gt;手持系统 （）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;112-计算环境&#34;&gt;1.12 计算环境
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;传统环境
&lt;ul&gt;
&lt;li&gt;批处理计算机系统，以批量的方式处理作业&lt;/li&gt;
&lt;li&gt;分时系统采用定时器和调度算法，通过CPU迅速地循环进程，给其中每一个用户分配资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户-服务器计算&lt;/li&gt;
&lt;li&gt;对等计算&lt;/li&gt;
&lt;li&gt;基于 web 计算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第-2-章-操作系统结构&#34;&gt;第 2 章 操作系统结构
&lt;/h2&gt;&lt;p&gt;本章目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍操作系统为用户、进程和其他系统提供的服务&lt;/li&gt;
&lt;li&gt;讨论组织操作系统的不同方法&lt;/li&gt;
&lt;li&gt;解释如何安装、定制操作系统，以及如何启动操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-操作系统服务&#34;&gt;2.1 操作系统服务
&lt;/h3&gt;&lt;p&gt;一组操作系统服务提供对用户很有用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户界面 （GUI、CLI、批界面）&lt;/li&gt;
&lt;li&gt;程序执行 （系统必须能将程序装入内存并运行该程序）&lt;/li&gt;
&lt;li&gt;I/O操作 （运行程序需要的 IO）&lt;/li&gt;
&lt;li&gt;文件系统操作 （读写文件和目录）&lt;/li&gt;
&lt;li&gt;通信 （进程间交换信息）&lt;/li&gt;
&lt;li&gt;错误检测&lt;/li&gt;
&lt;li&gt;资源分配 （多个用户或作业运行时，需要分配资源）&lt;/li&gt;
&lt;li&gt;统计 （记录哪些用户使用了哪些资源）&lt;/li&gt;
&lt;li&gt;保护和安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-操作系统的用户界面&#34;&gt;2.2 操作系统的用户界面
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;命令解释程序&lt;/li&gt;
&lt;li&gt;图形用户界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-系统调用&#34;&gt;2.3 系统调用
&lt;/h3&gt;&lt;p&gt;系统调用是获取操作系统所提供的服务的接口&lt;/p&gt;
&lt;p&gt;应用程序员最常用的 API 有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Win32 API （Windows 系统）&lt;/li&gt;
&lt;li&gt;POSIX API （Unix、Linux 和 Mac OS X）&lt;/li&gt;
&lt;li&gt;Java API （JVM）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 API 不用实际系统调用的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可移植性强&lt;/li&gt;
&lt;li&gt;实际的系统调用比 API 难用且更复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/systemcall.png&#34;
	width=&#34;1376&#34;
	height=&#34;732&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/systemcall_hu3433207362571292550.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/systemcall_hu2611884753704626806.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;系统调用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-系统调用类型&#34;&gt;2.4 系统调用类型
&lt;/h3&gt;&lt;p&gt;系统调用可以分为 5 大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程控制 （结束、放弃、装入、执行、创建进程、终止进程、取得进程属性、设置进程属性、等待时间、等待事件、唤醒事件、分配和释放内存）&lt;/li&gt;
&lt;li&gt;文件管理 （创建文件、删除文件、打开、关闭、读、写、重定位、取得文件属性、设置文件属性）&lt;/li&gt;
&lt;li&gt;设备管理 （请求设备、释放设备、读、写、重定位、取得设备属性、设置设备属性、逻辑连接或断开设备）&lt;/li&gt;
&lt;li&gt;信息维护 （读取时间或日期、设置时间或日期、读取系统数据、设置系统数据、读取进程，文件或设备属性、设置进程，文件或设备属性）&lt;/li&gt;
&lt;li&gt;通信 （创建，删除通信连接、发送，接收消息、传递状态信息、连接或断开远程设备）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两种常见的通信模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息传递模型 （通信进程通过交换消息来传递信息）&lt;/li&gt;
&lt;li&gt;共享内存模型 （通过 shared memory create 和 shared memory attach 系统调用来获得其他进程所拥有的内存区域访问权）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-系统程序&#34;&gt;2.5 系统程序
&lt;/h3&gt;&lt;p&gt;可以分为分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件管理&lt;/li&gt;
&lt;li&gt;状态信息&lt;/li&gt;
&lt;li&gt;文件修改&lt;/li&gt;
&lt;li&gt;程序设计语言支持&lt;/li&gt;
&lt;li&gt;程序装入和执行&lt;/li&gt;
&lt;li&gt;通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;26-操作系统设计和实现&#34;&gt;2.6 操作系统设计和实现
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;策略和机制的分离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;机制决定了如何做，策略决定做什么&lt;/p&gt;
&lt;h3 id=&#34;27-操作系统结构&#34;&gt;2.7 操作系统结构
&lt;/h3&gt;&lt;p&gt;MS-DOS 结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/msdos.png&#34;
	width=&#34;836&#34;
	height=&#34;748&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/msdos_hu12618634128600311745.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/msdos_hu11719835852956730421.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;MS-DOS结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;268px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;分层结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/layer.png&#34;
	width=&#34;1600&#34;
	height=&#34;790&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/layer_hu1691517810630166221.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/layer_hu16489452714626111053.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;分层结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;202&#34;
		data-flex-basis=&#34;486px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;模块结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度类&lt;/li&gt;
&lt;li&gt;文件系统&lt;/li&gt;
&lt;li&gt;可加载的系统调用&lt;/li&gt;
&lt;li&gt;可执行的格式&lt;/li&gt;
&lt;li&gt;STREAMS 模块&lt;/li&gt;
&lt;li&gt;杂项模块&lt;/li&gt;
&lt;li&gt;设备和总线驱动程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;28-虚拟机&#34;&gt;2.8 虚拟机
&lt;/h3&gt;&lt;p&gt;虚拟机的基本思想是单个计算机的硬件抽象为几个不同的执行环境&lt;/p&gt;
&lt;h3 id=&#34;29-java&#34;&gt;2.9 Java
&lt;/h3&gt;&lt;p&gt;Java 技术包含三个核心组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程语言规范&lt;/li&gt;
&lt;li&gt;应用程序接口 （API）&lt;/li&gt;
&lt;li&gt;虚拟机规范&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;210-操作系统生成&#34;&gt;2.10 操作系统生成
&lt;/h3&gt;&lt;p&gt;下面的信息必须确定下来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用什么 CPU，安装什么选项，对于多 CPU 系统，必须描述每个 CPU&lt;/li&gt;
&lt;li&gt;有多少可用内存&lt;/li&gt;
&lt;li&gt;有什么可用设备&lt;/li&gt;
&lt;li&gt;需要什么操作系统选项或使用什么参数值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;211-系统启动&#34;&gt;2.11 系统启动
&lt;/h3&gt;&lt;h2 id=&#34;第二部分-进程管理&#34;&gt;第二部分 进程管理
&lt;/h2&gt;&lt;h3 id=&#34;第-3-章-进程&#34;&gt;第 3 章 进程
&lt;/h3&gt;&lt;p&gt;本章目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍进程的概念——执行中的程序，形成所有计算的基础&lt;/li&gt;
&lt;li&gt;介绍进程的不同特点，包括调度、创建和终止以及通信&lt;/li&gt;
&lt;li&gt;介绍客户机——服务机系统内的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-进程概念&#34;&gt;3.1 进程概念
&lt;/h3&gt;&lt;p&gt;进程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序代码 （文本段 text section）&lt;/li&gt;
&lt;li&gt;活动 （程序计数器的值和处理器寄存器的内容）&lt;/li&gt;
&lt;li&gt;进程栈（包括临时数据，函数参数、返回地址、局部变量）&lt;/li&gt;
&lt;li&gt;数据段 （data section）&lt;/li&gt;
&lt;li&gt;堆 （heap），进程在运行期间动态分配的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/heap.png&#34;
	width=&#34;522&#34;
	height=&#34;552&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/heap_hu4928036593075080253.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/heap_hu17551832814287426295.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;内存中的堆&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;226px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;进程的状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建&lt;/li&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;li&gt;等待&lt;/li&gt;
&lt;li&gt;就绪&lt;/li&gt;
&lt;li&gt;终止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/status.png&#34;
	width=&#34;1372&#34;
	height=&#34;660&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/status_hu7910684051081812886.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/status_hu4808616726937548567.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;进程的状态&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;进程控制块 (PCB)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程状态&lt;/li&gt;
&lt;li&gt;程序计数器 （表示下一个指令执行的地址）&lt;/li&gt;
&lt;li&gt;CPU 寄存器&lt;/li&gt;
&lt;li&gt;CPU 调度信息 （进程优先级、调度队列的指针和其他调度参数）&lt;/li&gt;
&lt;li&gt;内存管理信息 （基址和界限寄存器的值、页表或段表）&lt;/li&gt;
&lt;li&gt;记账信息 （CPU时间、实际使用时间、时间界限、记账数据、作业或进程数量）&lt;/li&gt;
&lt;li&gt;I/O 状态信息 （I/O设备列表、打开文件列表等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/process.png&#34;
	width=&#34;1280&#34;
	height=&#34;1082&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/process_hu4023142540358606211.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/process_hu2238570758860655504.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CPU进程间切换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;283px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-进程调度&#34;&gt;3.2 进程调度
&lt;/h3&gt;&lt;p&gt;调度队列： 进程进入系统时，会被加到作业队列中，该队列中包含所有的进程&lt;/p&gt;
&lt;p&gt;新进程开始处于就绪队列，它就在队列中等待直到被选中执行或分派&lt;/p&gt;
&lt;p&gt;当进程分配到 CPU 并执行时，可能发生下面几种事件中的一种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程可能发出一个 I/O 请求，并被放到 I/O 队列中&lt;/li&gt;
&lt;li&gt;进程可能创建一个新的子进程，并等待结束&lt;/li&gt;
&lt;li&gt;进程可能会由于中断而强制释放 CPU， 并被放回就绪队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/queue.png&#34;
	width=&#34;1322&#34;
	height=&#34;714&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/queue_hu2814358614238604182.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/queue_hu3082134546595529680.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;队列图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;调度程序：从队列中选择进程的程序&lt;/p&gt;
&lt;p&gt;上下文切换：CPU从一个进程切换到另一个进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核将旧进程的内容保存到 PCB 中&lt;/li&gt;
&lt;li&gt;装入经调度要执行的已保存的新进程的上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-进程操作&#34;&gt;3.3 进程操作
&lt;/h3&gt;&lt;p&gt;进程创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统调用创建进程，父子进程，进程树，进程唯一标识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/tree.png&#34;
	width=&#34;1318&#34;
	height=&#34;1350&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/tree_hu14806127153921503826.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/tree_hu4176469756405395675.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;进程树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当进程创建进程时，有两种可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父进程与子进程并发执行&lt;/li&gt;
&lt;li&gt;父进程等待，直到某个或全部子进程执行完毕&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新进程的地址空间也有两种可能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子进程是父进程的副本&lt;/li&gt;
&lt;li&gt;子进程装入一个新程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程终止：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exit()请求操作系统删除自身&lt;/li&gt;
&lt;li&gt;子进程可以返回状态到父进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父进程终止子进程的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子进程使用了超过它所分配到的一些资源&lt;/li&gt;
&lt;li&gt;分配给子进程的任务已不再需要&lt;/li&gt;
&lt;li&gt;父进程结束，若父进程终止，操作系统将不允许子进程继续&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34-进程间的通信&#34;&gt;3.4 进程间的通信
&lt;/h3&gt;&lt;p&gt;允许进程协作的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息共享 （并发访问一个资源）&lt;/li&gt;
&lt;li&gt;加快计算&lt;/li&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;方便 （单用户可以执行多任务）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程通信的两个基本模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享内存&lt;/li&gt;
&lt;li&gt;消息传递&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/model.png&#34;
	width=&#34;1456&#34;
	height=&#34;828&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/model_hu15983377007450947302.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/model_hu402519677480880288.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;通信模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;共享内存模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者 —— 消费者问题&lt;/li&gt;
&lt;li&gt;无限缓冲区 （消费者要等待新的项，生产者总可以产生新的项）&lt;/li&gt;
&lt;li&gt;有限缓冲区 （如果缓冲区为空，消费者必须等待。如果缓冲区满，生产者必须等待）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息传递模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息传递工具 （必须提供发送和接收功能）&lt;/li&gt;
&lt;li&gt;若进程间要彼此发送消息和接收消息，它们间必须有通信链路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现链路发送和接收操作的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接或间接通信&lt;/li&gt;
&lt;li&gt;同步或异步通信&lt;/li&gt;
&lt;li&gt;自动或显式缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须明确的命名通信的接收者或者发送者 （对称寻址）
&lt;ul&gt;
&lt;li&gt;send(P, message): 发送消息到 P&lt;/li&gt;
&lt;li&gt;receive(Q, message): 接收来自 Q 的消息&lt;/li&gt;
&lt;li&gt;通信链路要求
&lt;ul&gt;
&lt;li&gt;在需要通信的每队进程间自动建立通信链路，进程只需要知道互相的标识符&lt;/li&gt;
&lt;li&gt;一个通信链路只与两个进程相关&lt;/li&gt;
&lt;li&gt;每队进程间只有一个通信链路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只需要发送者命名接收者，不需要接收者命名发送者 （非对称寻址）
&lt;ul&gt;
&lt;li&gt;send(P, message): 发送消息到 P&lt;/li&gt;
&lt;li&gt;receive(id, message): 接收来自任何进程的消息，变量 id 设置成与其通信的进程名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;间接通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过邮箱和端口来发送和接收消息&lt;/li&gt;
&lt;li&gt;邮箱可以抽象成一个对象，进程可以向其中存放消息，也可以从中删除消息&lt;/li&gt;
&lt;li&gt;每个邮箱都有一个唯一标识
&lt;ul&gt;
&lt;li&gt;send(A, message): 发送一个消息到邮箱 A&lt;/li&gt;
&lt;li&gt;receive(A, message): 接收来自邮箱 A 的消息&lt;/li&gt;
&lt;li&gt;通信链路要求
&lt;ul&gt;
&lt;li&gt;只有在两个进程共享一个邮箱的时候才能建立通信链路&lt;/li&gt;
&lt;li&gt;一个链路可以和两个或者更多的进程相关联&lt;/li&gt;
&lt;li&gt;两个通信进程之间可以有多条不同的链路，每条链路对应于一个邮箱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设 P1、P2、P3 都共享邮箱，P1 发送消息到邮箱，P2 和 P3 谁能接收到信息，由系统定义决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许一个链路最多只能与两个进程相关联&lt;/li&gt;
&lt;li&gt;允许一次最多一个进程执行 receive() 操作&lt;/li&gt;
&lt;li&gt;允许系统随意选择一个进程接收消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;邮箱可以为进程所拥有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程地址空间的一部分&lt;/li&gt;
&lt;li&gt;进程终止时，邮箱消失，往邮箱发送消息会被通知邮箱不存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;邮箱也可以为操作系统所拥有，操作系统必须提供的机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建新邮箱 （创建的进程默认为进程拥有者）&lt;/li&gt;
&lt;li&gt;通过邮箱发送和接收消息&lt;/li&gt;
&lt;li&gt;删除邮箱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;send、receive 原语实现有不同的设计选项（同步-阻塞、异步-非阻塞）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞发送&lt;/li&gt;
&lt;li&gt;非阻塞发送&lt;/li&gt;
&lt;li&gt;阻塞接收&lt;/li&gt;
&lt;li&gt;非阻塞接收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信进程所交换的消息都驻留在临时队列中，队列实现的3个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;零容量&lt;/li&gt;
&lt;li&gt;有限容量&lt;/li&gt;
&lt;li&gt;无限容量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-ipc-系统的实例&#34;&gt;3.5 IPC 系统的实例
&lt;/h3&gt;&lt;h3 id=&#34;36-客户机--服务器通信&#34;&gt;3.6 客户机 —— 服务器通信
&lt;/h3&gt;&lt;p&gt;三种客户机——服务器通信方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;套接字 （socket），比较低级的分布式进程通信，只允许通信线程交换无结构字节流。&lt;/li&gt;
&lt;li&gt;远程过程调用 （RPC）&lt;/li&gt;
&lt;li&gt;Java的远程方法调用（RMI）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第-4-章-线程&#34;&gt;第 4 章 线程
&lt;/h2&gt;&lt;p&gt;本章目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入线程的概念 —— 一种 CPU 利用的基本单元，它是形成多线程计算机的基础&lt;/li&gt;
&lt;li&gt;讨论 Pthread API 、Win32 API 和 Java 线程库&lt;/li&gt;
&lt;li&gt;研究有关多线程编程的几个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-概述&#34;&gt;4.1 概述
&lt;/h3&gt;&lt;p&gt;线程是 CPU 使用的基本单元，由线程ID、程序计数器、寄存器集合和栈组成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/thread.png&#34;
	width=&#34;1336&#34;
	height=&#34;872&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/thread_hu8836499595604687741.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/thread_hu8213581157549727341.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;线程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-多线程模型&#34;&gt;4.2 多线程模型
&lt;/h3&gt;&lt;p&gt;线程支持的两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户层的用户线程&lt;/li&gt;
&lt;li&gt;内核层的内核线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/user_model.png&#34;
	width=&#34;1014&#34;
	height=&#34;880&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/user_model_hu3657407336175590310.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/user_model_hu2201384556491566176.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一对多&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/one_model.png&#34;
	width=&#34;1074&#34;
	height=&#34;554&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/one_model_hu5515158560676147043.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/one_model_hu8753273545752124837.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;一对一模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;193&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/multiple.png&#34;
	width=&#34;1316&#34;
	height=&#34;826&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/multiple_hu3234788864136826945.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/multiple_hu2899893586841915415.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;多对多模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;43-线程库&#34;&gt;4.3 线程库
&lt;/h3&gt;&lt;p&gt;线程库为程序员提供创建和管理线程的 API&lt;/p&gt;
&lt;p&gt;两种方法实现线程库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在用户空间中提供一个没有内核支持的库&lt;/li&gt;
&lt;li&gt;执行一个由操作系统直接支持的内核级的库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种线程库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX Pthread （Unix/Linux）&lt;/li&gt;
&lt;li&gt;Win32 （Windows）&lt;/li&gt;
&lt;li&gt;Java （利用前两个）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;44-java-线程&#34;&gt;4.4 Java 线程
&lt;/h3&gt;&lt;p&gt;Java 线程状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建&lt;/li&gt;
&lt;li&gt;可运行&lt;/li&gt;
&lt;li&gt;阻塞&lt;/li&gt;
&lt;li&gt;死亡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/java_thread.png&#34;
	width=&#34;1366&#34;
	height=&#34;504&#34;
	srcset=&#34;https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/java_thread_hu4932649409454669476.png 480w, https://yangzhaoxing90.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5-java%E5%AE%9E%E7%8E%B0/java_thread_hu17676211541619722600.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;java 线程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;650px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;45-多线程问题&#34;&gt;4.5 多线程问题
&lt;/h3&gt;&lt;p&gt;线程取消：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是在线程完成之前终止线程的任务&lt;/li&gt;
&lt;li&gt;异步取消 （立即终止目标线程）&lt;/li&gt;
&lt;li&gt;延迟取消 （目标线程不断的检查它是否应终止）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信号在 Unix 中用于通知进程某个特定事件的发生&lt;/li&gt;
&lt;li&gt;信号模式：
&lt;ul&gt;
&lt;li&gt;信号是由特定事件的发生所产生的&lt;/li&gt;
&lt;li&gt;产生的信号要发送到进程&lt;/li&gt;
&lt;li&gt;一旦发送，信号必须加以处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程池：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程执行器 （大小为 1 的线程池）&lt;/li&gt;
&lt;li&gt;固定线程执行器 （大小固定的线程池）&lt;/li&gt;
&lt;li&gt;缓冲线程执行器 （无限制的线程池）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程特定数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个线程需要一定的数据自我副本 （ThreadLocal）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
