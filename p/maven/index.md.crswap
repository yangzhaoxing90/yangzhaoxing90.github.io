---
title: Maven
description: Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information.
date: 2025-02-11 00:00:00+0000
image: cover.png
tags: 
    - Maven
categories:
    - Maven
weight: 1
---

## What is Maven?

The result is a tool that can now be used for building and managing any Java-based project.

**Maven's Objectives**

- Making the build process easy
- Providing a uniform build system
- Providing quality project information
- Encouraging better development practices

## Maven in 5 Minutes

- installation

```cmd
mvn --version
```

**Creating a Project**


```cmd
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5 -DinteractiveMode=false
```

```cmd
my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java
```

The `src/main/java` directory contains the project source code.

The `src/test/java` directory contains the test source.

The `pom.xml` file is the project's Project Object Model, or POM. 

This is a Maven convention and to learn more about it you can read our Introduction to the [<mark>Standard Directory Layout</mark>](https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html).

The POM

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>my-app</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>17</maven.compiler.release>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.11.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Optionally: parameterized tests support -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
       ... lots of helpful plugins
    </pluginManagement>
  </build>
</project>
```

| label | meaning |
| ---- | ---- |
| **project** | This is the top-level element in all Maven `pom.xml` files. |
| **modelVersion** | This element indicates what `version` of the object model this `POM` is using. The version of the model itself changes very infrequently but it is mandatory in order to ensure stability of use if and when the Maven developers deem it necessary to change the model. | 
| **groupId** | This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. | 
| **artifactId** | This element indicates the unique base name of the primary artifact being generated by this project. The primary artifact for a project is typically a `JAR` file. Secondary artifacts like source bundles also use the artifactId as part of their final name.  | 
| **version** | This element indicates the version of the artifact generated by the project. Maven goes a long way to help you with version management and you will often see the SNAPSHOT designator in a version, which indicates that a project is in a state of development. |
| **name** | This element indicates the display name used for the project. This is often used in Maven's generated documentation. |
| **url** | This element indicates where the project's site can be found. This is often used in Maven's generated documentation. |
| **properties** | This element contains value placeholders accessible anywhere within a POM. |
| **dependencies** | This element's children list dependencies. The cornerstone of the POM. |
| **build** | This element handles things like declaring your project's directory structure and managing plugins. |

For a complete reference of what elements are available for use in the POM please refer to our [POM Reference](https://maven.apache.org/ref/3.9.9/maven-model/maven.html).


## Maven in 30 Minutes

**What is Maven?**

Maven is essentially a project management and comprehension tool and as such provides a way to help with managing:

- Builds
- Documentation
- Reporting
- Dependencies
- SCMs
- Releases
- Distribution

**How do I compile my application sources?**

```cmd
mvn compile
```

**How do I compile my test sources and run my unit tests?**

```cmd
mvn test
mvn test-compile
```

**How do I create a JAR and install it in my local repository?**

```cmd
mvn package
mvn install
mvn site
mvn clean
```

**What is a SNAPSHOT version?**

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
  ...
  <groupId>...</groupId>
  <artifactId>my-app</artifactId>
  ...
  <version>1.0-SNAPSHOT</version>
  <name>Maven Quick Start Archetype</name>
  ...
```

The `SNAPSHOT` value refers to the 'latest' code along a development branch, and provides no guarantee the code is stable or unchanging. 

**How do I use plugins?**

```xml
...
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>3.3</version>
      <configuration>
        <source>1.5</source>
        <target>1.5</target>
      </configuration>
    </plugin>
  </plugins>
</build>
...
```

**How do I add resources to my JAR?**

You see below in our example we have added the directory `${project.basedir}/src/main/resources` into which we place any resources we wish to package in our JAR. The simple rule employed by Maven is this: any directories or files placed within the `${project.basedir}/src/main/resources` directory are packaged in your JAR with the exact same structure starting at the base of the JAR.

## POM Reference

<https://maven.apache.org/pom.html>

## Settings Reference

<https://maven.apache.org/settings.html>

## Running Apache Maven

```cmd
  mvn [options] [<goal(s)>] [<phase(s)>]

  mvn -h
```

The built-in lifecycles and their most used phases, in order, are:

- clean - clean
- default - validate, compile, test, package, verify, install, deploy
- site - site, site-deploy

## Maven Plugins 

Maven is - at its heart - a plugin execution framework. all work is done by plugins. 

- **Build** plugins will be executed during the build and they should be configured in the <build/> element from the POM.
- **Reporting** plugins will be executed during the site generation and they should be configured in the <reporting/> element from the POM. 

<https://maven.apache.org/plugins/index.html>

