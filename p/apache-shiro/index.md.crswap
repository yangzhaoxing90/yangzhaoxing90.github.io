---
title: Apache Shiro
description: Apache Shiro focuses on ease-of-use, so you can rely on secure, stable authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application. Get started!
date: 2025-02-10 00:00:00+0000
image: cover.png
tags: 
    - Shiro
categories:
    - Shiro
weight: 1
---

## The Basics

### Introduction to the Apache Shiro Java Security Framework 

Here are some things that you can do with Apache Shiro:

- Authenticate a user to verify their identity
- Perform access control for a user, such as:
    - Determine if a user is assigned a certain security role or not
    - Determine if a user is permitted to do something or not
- Use a Session API in any environment, even without web or EJB containers.
- React to events during authentication, access control, or during a session’s lifetime.
- Aggregate 1 or more data sources of user security data and present this all as a single composite user 'view'.
- Enable Single Sign On (SSO) functionality
- Enable 'Remember Me' services for user association without login
...

![Shiro Features](feature.png)

Apache Shiro Features:

- **Authentication**: Sometimes referred to as 'login', this is the act of proving a user is who they say they are.
- **Authorization**: The process of access control, i.e. determining 'who' has access to 'what'.
- **Session Management**: Managing user-specific sessions, even in non-web or EJB applications.
- **Cryptography**: Keeping data secure using cryptographic algorithms while still being easy to use.

## Architecture

![Shiro Architecture](architecture.png)

- **Subject**: basically anything that is currently interacting with the software
- **SecurityManager**: When you interact with a Subject, those interactions translate to subject-specific interactions with the SecurityManager
- **Realms**: Realms act as the ‘bridge’ or ‘connector’ between Shiro and your application’s security data

![Shiro Architecture Details](details.png)

## 10 Minute Tutorial on Apache Shiro

```java
        // The easiest way to create a Shiro SecurityManager with configured
        // realms, users, roles and permissions is to use the simple INI config.
        // We'll do that by using a factory that can ingest a .ini file and
        // return a SecurityManager instance:

        // Use the shiro.ini file at the root of the classpath
        // (file: and url: prefixes load from files and urls respectively):
        SecurityManager securityManager = new BasicIniEnvironment("classpath:shiro.ini").getSecurityManager();


        // for this simple example quickstart, make the SecurityManager
        // accessible as a JVM singleton.  Most applications wouldn't do this
        // and instead rely on their container configuration or web.xml for
        // webapps.  That is outside the scope of this simple quickstart, so
        // we'll just do the bare minimum, so you can continue to get a feel
        // for things.
        SecurityUtils.setSecurityManager(securityManager);

        // Now that a simple Shiro environment is set up, let's see what you can do:

        // get the currently executing user:
        Subject currentUser = SecurityUtils.getSubject();


        // Do some stuff with a Session (no need for a web or EJB container!!!)
        Session session = currentUser.getSession();
        session.setAttribute("someKey", "aValue");
        String value = (String) session.getAttribute("someKey");
        if (value.equals("aValue")) {
            log.info("Retrieved the correct value! [" + value + "]");
        }

        // let's login the current user so we can check against roles and permissions:
        if (!currentUser.isAuthenticated()) {
            UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");
            token.setRememberMe(true);
            try {
                currentUser.login(token);
            } catch (UnknownAccountException uae) {
                log.info("There is no user with username of " + token.getPrincipal());
            } catch (IncorrectCredentialsException ice) {
                log.info("Password for account " + token.getPrincipal() + " was incorrect!");
            } catch (LockedAccountException lae) {
                log.info("The account for username " + token.getPrincipal() + " is locked.  " +
                        "Please contact your administrator to unlock it.");
            }
            // ... catch more exceptions here (maybe custom ones specific to your application?
            catch (AuthenticationException ae) {
                //unexpected condition?  error?
            }
        }

        //say who they are:
        //print their identifying principal (in this case, a username):
        log.info("User [" + currentUser.getPrincipal() + "] logged in successfully.");


```