---
title: PySide6 Tutorial
description: The complete PySide6 tutorial — Create GUI applications with Python
slug: PySide6 Tutorial
date: 2024-01-21 14:00:00+0000
image: pyside.png
categories:
    - pyside
tags:
    - python
weight: 1       # You can add weight to some posts to override the default sorting (date descending)
---

## Getting started with PySide6

reference: https://www.pythonguis.com/tutorials/pyside6-creating-your-first-window/

### Creating your first app with PySide6

Creating an application

```python
    from PySide6.QtWidgets import QApplication, QWidget

    # Only needed for access to command line arguments
    import sys

    # You need one (and only one) QApplication instance per application.
    # Pass in sys.argv to allow command line arguments for your app.
    # If you know you won't use command line arguments QApplication([]) works too.
    app = QApplication(sys.argv)

    # Create a Qt widget, which will be our window.
    window = QWidget()
    window.show()  # IMPORTANT!!!!! Windows are hidden by default.

    # Start the event loop.
    app.exec()
```


What's the event loop?

QApplication object to function. This object holds the event loop of your application — the core loop which governs all user interaction with the GUI.

![event loop](loops.png)

**Event queue**: 
    whether a press of a key, click of a mouse, or mouse movement — generates an event which is placed on the event queue.

**Event handler**:
    The event handler deals with the event, then passes control back to the event loop to wait for more events

**Event loop**:
    There is only one running event loop per application.
    In the event loop, the queue is checked on each iteration and if a waiting event is found, the event and control is passed to the specific event handler for the event.

**QMainWindow**

    This is a pre-made widget which provides a lot of standard window features you'll make use of in your apps, including toolbars, menus, a statusbar, dockable widgets and more


```python
import sys
from PySide6.QtWidgets import QApplication, QMainWindow

app = QApplication(sys.argv)

window = QMainWindow()
window.show()

# Start the event loop.
app.exec()
```

add some content

```python
import sys

from PySide6.QtCore import QSize, Qt
from PySide6.QtWidgets import QApplication, QMainWindow, QPushButton


# Subclass QMainWindow to customize your application's main window
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("My App")

        button = QPushButton("Press Me!")

        # Set the central widget of the Window.
        self.setCentralWidget(button)


app = QApplication(sys.argv)

window = MainWindow()
window.show()

app.exec()
```

![example](example.png)

Sizing windows and widgets

```python
from PySide6.QtCore import QSize, Qt

self.setFixedSize(QSize(400, 300))
```

## PySide6 Signals, Slots & Events

### QPushButton Signals

```python
import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QPushButton

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("My App")

        button = QPushButton("Press Me!")
        button.setCheckable(True)
        button.clicked.connect(self.the_button_was_clicked)

        # Set the central widget of the Window.
        self.setCentralWidget(button)

    def the_button_was_clicked(self):
        print("Clicked!")

app = QApplication(sys.argv)

window = MainWindow()
window.show()

app.exec()
```

### Receiving data

```python
  button = QPushButton("Press Me!")
    button.setCheckable(True)
    button.clicked.connect(self.the_button_was_clicked)
    button.clicked.connect(self.the_button_was_toggled)

    def the_button_was_toggled(self, checked):
        print("Checked?", checked)
```